// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  subCategories SubCategory[] @relation("StoreToSubCategory")
  brands        Brand[] @relation("StoreToBrand")
  products      Product[] @relation("StoreToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  name        String
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  images      Imageforbillboard[]
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

// 5.50.40 ta size için oluşturmaya başlıyor videoda)

model SubCategory {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToSubCategory", fields: [storeId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

// 6.06.00 da colors için oluşturmaya başlıyor videoda

model Brand {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBrand", fields: [storeId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  // Price ile minqty değiştirildi Price Decimal şeklinde idi
  minqty      String
  // info String kısmı eklendi
  info        String
  // stok kodu eklendi
  code   String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  subCategoryId String
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
  brandId     String
  brand       Brand       @relation(fields: [brandId], references: [id])
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
  @@index([subCategoryId])
}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Imageforbillboard {
  id          String   @id @default(uuid())
  billboardId String   // Foreign Key to Billboard
  billboard   Billboard  @relation(fields: [billboardId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([billboardId])
}

